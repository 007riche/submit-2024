// Becomes useless because we have the jpa repositories,
    // with sufficient databases transaction performance for this practical assignment
//    public  void reloadPartners() {
//        System.err.println("reloadPartners()  called for restart");
//        Hotel runningHotel = Hotel.getInstance();
////        runningHotel.setHotelPartnership(this.partenershipDAO.getAll());
//    }
//
//    public  void reloadRooms() {
//        System.err.println("reloadRooms()  called for restart");
//        Hotel runningHotel = Hotel.getInstance();
////        runningHotel.setHotelRooms(this.roomDAO.getAll());
////        for (int i = 0; i < runningHotel.getHotelRooms().size(); i++) {
////            System.out.println("Reloaded room img id: "+ runningHotel.getHotelRooms().get(i).getImgId());
////        }
//    }
//
//    public  void reloadBookings() {
//        System.err.println("reloadBookings()  called for restart");
//        Hotel runningHotel = Hotel.getInstance();
////        runningHotel.setHotleBooking(this.bookingDAO.getAll());
//    }


//    @GetMapping("/{idAgency}/{password}")
//    public Partnership getPartnerByIdAndPassword(String idAgency,
//                                                 String password) {
////        return persistanceService.findP;
//    }


//            throw new RuntimeException(e);

//            throw new RuntimeException(e);

//    public static boolean isPartner(String idAgency, String password) {
//        Hotel runningHotel = Hotel.getInstance();
//        for (int i = 0; i < runningHotel.getHotelPartnership().size(); i++) {
//            if (runningHotel.getHotelPartnership().get(i).getIdAgency().contains(idAgency.trim())
//                    && runningHotel.getHotelPartnership().get(i).getPassword().contains(password.trim())) return true;
//        }
//        return false;
//    }